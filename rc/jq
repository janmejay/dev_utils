# intersect 2 sets, passed as 2 members of an array eg.
#  input:
#   $ echo '[[1, 2, 3, 4], [5, 6, 4, 1]]' | jq '. | intersect'
#  output:
#  [1, 4]
def intersect:
    (.[0] | unique) + (.[1] | unique) | sort as $s
    | reduce range(1; $s|length) as $i
        ([]; if $s[$i-1]  == $s[$i] then (. + [$s[$i]]) else . end);

# merge multiple maps in an array into 1 big map
#  input:
#   $ echo '[{"foo": 1}, {"bar": 2}]' | jq '. | merge'
#  output:
#   {"foo": 1, "bar": 2}
def merge: reduce .[] as $sub_map ({}; . + $sub_map);

# make a map with some given value with keys from given array
#  input:
#   $ echo '["foo", "bar"]' | jq '. | mapify(5)'
#  output:
#   {"foo": 5, "bar": 5}
def mapify(v): reduce .[] as $str ({}; . + {($str): v});

# find value of a key recursively
#  input:
#   $ echo '[{"a": {"b" : 4}}, {"c" : {"d": 16}}]' | jq '. | find(.d)'
#  output:
#   16
def find(f): .. | select(type=="object" and f) | f;

# pm_nice
# makes a nice looking compact representation of patch_map
def pm_nice:
  (. | fromjson | to_entries
     | map({key: .key | fromjson | .patchId, value: .value | fromjson})
     | from_entries);

# grpid_s
# generates group-id string from groupId
def grpid_s:
  . | @text "\(.locationId)/\(.superGroupId)/\(.subGroupId)";

# pretty brm
def pretty_brm:
  (.
   | {csn: .value.contentSequenceNumber,
      cid: .key.compositeContentId.contentId,
      rsn: .key.representationSequenceNumber,
      lsz: .value.logicalBytes,
      r: [.value.references[].refType],
      t: (.value.blobRepresentationTimestamp/1000 | todate),
      p: .value.patchId.patchId,
      b:
        (if (.value.baseRef) then
          .value.baseRef
          | {rsn: .representationSequenceNumber,
             c: (.compositeContentId
                 | {cid: .contentId,
                    g: (.groupId | grpid_s)})}
        else
          null
        end)});

# brm_nice
# make a nice looking blob-representation-map
def brm_nice:
  (. | fromjson | to_entries[]
     | {key: .key | fromjson, value: .value | fromjson}
     | pretty_brm);

# brm_verbose
# make a nice looking blob-representation-map
def brm_verbose:
  (. | fromjson | to_entries[]
     | {key: .key | fromjson, value: .value | fromjson, ksn: .key});

# given brm_verbose output
def find_base(ksn):
  map(. | select(.ksn == ksn));

def find_base_rec(ksn):
  (. as $brm | find_base(ksn) as $i
             | if (($i | length) == 0) then
                 []
               else
                 ($i | map(pretty_brm)) +
                   ($i | [map(. | .value.baseRef | tojson as $pksn
                                | $brm | find_base_rec($pksn))[][]])
               end);

# maddr
# map add recursively
#  input:
#   $ echo '[{"foo": 10, "bar": {"a": 1}},
#            {"foo": 4, "quux": 1, "bar": {"a": 2}}]' | jq '. | maddr'
#  output:
#   {"bar": {"a": 3}, "foo": 14, "quux": 1}
def maddr:
  reduce .[] as $m (
    {};
    . as $i | ($i + $m) as $u
            | $u
            | keys
            | map(. as $k | $k
                          | $u[.]
                          | (if (type == "object") then
                               [$i[$k], $m[$k]] | maddr
                             elif (type == "number") then
                               ($i[$k] // 0) + ($m[$k] // 0)
                             elif (type == "array") then
                               [$i + $m] | flatten(1)
                             else
                               error("maddr does not support this type")
                             end) as $v
                          | {key: $k, value: $v})
            | from_entries);


# load_dcbs_csv
# invoke as in $ cat dcbs.csv | qcsv 2 10 17 | jq '. | dcbs_csv_cols'
def load_dcbs_csv:
  . | {
      brm: .[0] | fromjson,
      hm:  .[1] | fromjson,
      pm:  .[2] | fromjson};

# tib
def tib:
  ./1024/1024/1024/1024;

# tb
def tb:
  ./1000/1000/1000/1000;

# verbose representation of sharded-group
def scg_verbose:
  .
  | .content_map=(
        .content_map
        | fromjson
        | with_entries({
          key: .key | fromjson | .id,
          value: .value | fromjson}))
  | del(.recent_unique_strings);

def sq2d:
  . | gsub("'"; "\"");

def ne_json(expr):
    if (. == null or . == "" or (. | fromjson | length) == 0) then . else (. | fromjson | expr) end;

def cm_nice:
  .
  | with_entries({key: .key | fromjson.id, value: .value | fromjson});


def dq2s:
  . | gsub("\""; "'");


def paren_array:
  . | @text "\(.)" | gsub("\\["; "(") | gsub("\\]"; ")");

def find_rsn_base_rec(rsn):
  . as $bv
  | $bv
  | map(select(.key.representationSequenceNumber == rsn))
  | .[0].ksn as $ksn
  | $bv
  | find_base_rec($ksn);


def decode:
    (. | "decode_decompress \(.[3:])" | qsh_text);


def dcbs_row:
  {id: .[0],
   bg_job_cfg: .[1],
   brm_s: .[2],
   cons_s: .[3],
   create_s: .[4],
   cross_lnonce: .[5],
   cross_lowner: .[6],
   cross_spec: .[7],
   del_cids: .[8],
   del_pdir: .[9],
   hm_s: .[10],
   ts: .[11],
   m_lnonce: .[12],
   m_lowner: .[13],
   min_valid_csn: .[14],
   next_csn: .[15],
   next_rsn: .[16],
   pm_s: .[17],
   runiq_strs: .[18],
   rev_specs: .[19],
   schema_ver: .[20],
   seq_no: .[21],
   state_uuid: .[22]};

def dcbs_row_50:
  {id: .[0],
   bg_job_cfg: .[1],
   brm_s: .[2],
   cons_s: .[3],
   create_s: .[4],
   cross_lnonce: .[5],
   cross_lowner: .[6],
   cross_spec: .[7],
   del_cids: .[8],
   del_pdir: .[9],
   hm_s: .[10],
   ts: .[11],
   dtbs_on: .[12],
   m_lnonce: .[13],
   m_lowner: .[14],
   min_valid_csn: .[15],
   next_csn: .[16],
   next_rsn: .[17],
   pm_s: .[18],
   runiq_strs: .[19],
   rev_specs: .[20],
   schema_ver: .[21],
   seq_no: .[22],
   state_uuid: .[23]};

def dcbs_json_row_50:
  {id: .group_id,
   bg_job_cfg: .background_job_config,
   brm_s: .blob_representation_map,
   cons_s: .consolidate_specs,
   create_s: .create_spec,
   cross_lnonce: .cross_lock_nonce,
   cross_lowner: .cross_lock_owner,
   cross_spec: .cross_spec,
   del_cids: .deleted_content_id_set,
   del_pdir: .deleted_patch_dir_spec_set,
   hm_s: .handle_map,
   ts: .internal_timestamp,
   dtbs_on: .is_diff_tree_enabled,
   m_lnonce: .maintenance_lock_nonce,
   m_lowner: .maintenance_lock_owner,
   min_valid_csn: .min_valid_content_sequence_numner,
   next_csn: .next_content_sequence_number,
   next_rsn: .next_representation_sequence_number,
   pm_s: .patch_map,
   runiq_strs: .recent_unique_strings,
   rev_specs: .reverse_specs,
   schema_ver: .schema_version,
   seq_no: .sequence_number,
   state_uuid: .state_uuid};

def parse_brm_verbose:
  select(.brm_s != "{}")
  | .brm=(.brm_s | fromjson | [brm_verbose])
  | del(.brm_s);

def parse_pm_verbose:
  select(.pm_s != "{}")
  | .pm=(.pm_s | fromjson | pm_nice)
  | del(.pm_s);

def sbs_row:
  {id: .[0],
   close_spec: .[1],
   cm_s: .[2],
   create_s: .[3],
   del_s: .[4],
   hm_s: .[5],
   ts: .[6],
   next_csn: .[7],
   runiq_strs: .[8],
   schema_ver: .[9],
   seq_no: .[10],
   shard_sz: .[11],
   state_uuid: .[12]};

def sbs_row_50:
  {id: .[0],
   close_spec: .[1],
   cm_s: .[2],
   create_s: .[3],
   del_s: .[4],
   hm_s: .[5],
   ts: .[6],
   dtbs_on: .[7],
   next_csn: .[8],
   runiq_strs: .[9],
   schema_ver: .[10],
   seq_no: .[11],
   shard_sz: .[12],
   state_uuid: .[13]};

def scgid:
    gsub("_[0-9]+_[0-9]+$";"");

def grp_storage:
    .
    | to_entries
    | map(.key = (.key | fromjson | join("/")))
    | from_entries;

# generates graphviz spec for brm, used to render a graph for it
# usage:
#  $ cat /tmp/clip.g | jq -r '. as $g | .blob_representation_map | draw_brm($g.group_id)' > /tmp/g.dot
#  $ dot -Tsvg g.dot -o g.svg
#
# legend:
#   inverted-house     => pinned rep
#   solid oval         => rep with content-ref
#   dashed oval        => rep without content-ref
#   light-blue node    => full rep
#   white node         => inc rep
#   node label         => "rsn / csn"
#   tooltip            => rep time
def draw_brm(grp_id):
    def suffix_semi:
        if . == "" then "" else . + ";" end;
    .
    | [brm_nice]
    | sort_by([.csn, .rsn]) as $brm
    | $brm
    | map({key: (.rsn | tostring), value: .csn})
    | from_entries as $csn_for
    | $brm
    | map(
      .
      | select(.b)
      | .b_csn = $csn_for[.b.rsn | tostring]
      | .b_str = "\(.b.rsn) / \(.b_csn)"
      | .c_str = "\(.rsn) / \(.csn)"
      | .clr_wrt_b = if .b_csn < .csn then "lightblue" else "pink" end
      | .e_clr = if .b.c.g == grp_id then .clr_wrt_b else "red" end
      | .style = "[style=filled,color=\(.e_clr)]"
      | "\"\(.c_str)\" -> \"\(.b_str)\" \(.style)")
    | join(";")
    | suffix_semi as $edge_str
    | $brm
    | map(
      .
      | .ttip = .t
      | .is_c = (.r | map(. == "CONTENT") | any)
      | .pinned = (
        .
        | .r
        | map(select(
            . == "CONTENT" or
            . == "INCREMENTAL" or
            . == "CROSS" | not))
        | length > 0)
      | .brd = (
          if .is_c then
            "solid"
          else
            if .pinned then
              "dashed"
            else
            "dotted"
          end
        end)
      | .shp = if .pinned then "invhouse" else "oval" end
      | .styl = "[tooltip=\"\(.ttip)\",style=\(.brd),shape=\(.shp)]"
      | "\"\(.rsn) / \(.csn)\" \(.styl)")
    | join(";")
    | suffix_semi as $node_tip
    | $brm
    | map(
      .
      | select(.b | not)
      | "\"\(.rsn) / \(.csn)\" [style=filled,color=lightblue]")
    | join(";") as $full_str
    | @text "digraph \"\(grp_id)\" {\($edge_str)\($node_tip)\($full_str)}";
def expand:
    . | to_entries[] | {key: .key|fromjson, value: .value| fromjson};
