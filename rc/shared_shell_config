. $(dirname $0)/xsessionrc

bindkey "^[l" down-case-word

#removed :~/tools/thrift/bin because installed thrift-0.9.2 in /usr/local
export CDPATH=.:~:~/Desktop:~/projects:~/projects/observo
export SVN_EDITOR=$EDITOR
export PYTHONSTARTUP=~/.dev_utils/rc/pythonrc
export TZ='Asia/Calcutta'
export JAVA_OPTS='-Xmx1536m -Xms500m'
export EDITOR='emacs -nw -q'
export MYSQL_HOME=~/tools/mysql
alias emacs='/run/current-system/sw/bin/emacs -nw -q'

alias ruby_tags='/usr/bin/ctags -e -a --Ruby-kinds=-cmfF -o TAGS -R .'
alias gotags='etags `find . -name "*.go"`'
alias py_tags="find . -name '*.py' | etags --output TAGS -"
alias js_tags="/usr/bin/ctags -e -a --languages=js -o TAGS -R ."
alias notes='wine "C:\Program Files\lotus\notes\notes.exe"'
alias sql='~/.sq_client/squirrel-sql.sh'
alias e=$EDITOR
alias guest='qemu -hda /imp/debian.img -m 1024 -redir tcp:5022::22 -curses'
alias term='mrxvt --fullscreen -e screen'
alias syn='synergys --name left --daemon --config ~/.synergy_conf'
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'
alias idea10='~/tools/idea10/bin/idea.sh'
alias idea10_prop='~/tools/idea10_propritory/bin/idea.sh'
alias idea9='~/tools/idea9/bin/idea.sh'
alias idea8='~/tools/idea8/bin/idea.sh'
alias grep='grep --color=auto'

fx() { find . -iname "*$1*" | xclip -selection c. }

f() { find . -iname "*$1*" }

alias xs='xclip -selection c.'

x() { clip x && cat /tmp/clip.x | xs }

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

export PYENV=~/.pyenv

pyenv() {
    source $PYENV/$1/bin/activate
    export CUR_ENV=$1
}

venv2() { virtualenv $PYENV/$1 }

venv3() { virtualenv $PYENV/$1 -p python3 }

pipv() { pip `car $*` -E $PYENV/$CUR_ENV `cdr $*` }

car() { echo $* | awk '{print $1}' }
cdr() { echo $* | awk '{ for (i = NR + 1; i <= NF; i++) print $i }' }

unset RUBYOPT
alias mixer='xfce4-mixer'

base_name=,
base_dir='../'
for i in `seq 1 10`; do
    name=$name$base_name
    dir=$dir$base_dir
    alias $name="cd $dir"
done

export PATH=$PATH:/home/janmejay/tools/gcloud/bin:/mnt/work/bin

function scr() {
    local screen_layouts=~/.screenlayout;
    if [ $# -ne 1 ]; then
        echo "Please identify configuration to use, possible options are:"
        for i in find $screen_layouts -name '*.sh'; do
            echo "- $i" | sed -e 's/\.sh//g'
        done
    else
        local recipe=$screen_layouts/$1.sh
        if [ -f $recipe ]; then
            echo "Running $recipe"
            $recipe
        else
            echo "Recipe $recipe does not exist"
        fi
    fi
}

export PATH=~/tools/google-cloud-sdk/bin:$PATH:~/.local/bin
# alias clip='cat >> /tmp/clip'
function clipa() {
    suffix=''
    if [ "x$1" != 'x' ]; then
        suffix=".$1"
    fi
    clip_file="clip$suffix"
    if [ $clip_file != "clip" ]; then
        pwd | grep -Eq '^/tmp/'
        if [ $? -ne 0 ]; then
          clip_file="/tmp/${clip_file}"
        fi
    else
        clip_file="/tmp/${clip_file}"
    fi
    if [ -e $clip_file ]; then
        echo '' >> $clip_file
    else
        touch $clip_file
    fi
    local lines_before=$(wc -l $clip_file | awk '{print $1}')
    local chars_before=$(wc -c $clip_file | awk '{print $1}')
    if [ "x$2" = 'xx' ]; then
      copyq clipboard > $clip_file
    else
      tmux saveb -a $clip_file
    fi
    local lines_after=$(wc -l $clip_file | awk '{print $1}')
    local chars_after=$(wc -c $clip_file | awk '{print $1}')
    local lines_copied=$(expr $lines_after - $lines_before)
    local chars_copied=$(expr $chars_after - $chars_before)
    echo "Copied $chars_copied chars across $lines_copied lines to $clip_file"
}
function clip() {
    suffix=''
    if [ "x$1" != 'x' ]; then
        suffix=".$1"
    fi
    clip_file="clip$suffix"
    if [ $clip_file != "clip" ]; then
        pwd | grep -Eq '^/tmp/'
        if [ $? -ne 0 ]; then
          clip_file="/tmp/${clip_file}"
        fi
    else
        clip_file="/tmp/${clip_file}"
    fi
    rm $clip_file
    clipa $*
}
#alias clip='cat | xs'

alias music=pragha

# cassandra json cat (cat with workarounds for correcting invalid json
# that cqlsh generates
function cjcat() {
    cat $1 | sed -e 's/\\\\/\\/g'  -e 's/\\x00//g'
}

# cjcat for cqlsh ... "select json ..." dump (filters out non-data lines)
function cqcat() {
    cjcat $1 | tail -n+5 | head -n-1
}

unsetopt correct_all

export RANGER_LOAD_DEFAULT_RC=FALSE

function diff_url() {
    git log $1 -1 | grep -F 'Differential Revision:' | awk '{print $NF}' | xclip -selection c.
}

export BC_ENV_ARGS="-ql $HOME/.dev_utils/rc/bc.rc"

function tunnel_host_fetch {
    tun_alias=$1
    file_path=$2
    err_msg="Usage: tunnel_host_fetch <tunnel alias> <file path>"
    if [ "x$tun_alias" = 'x' ]; then
        echo $err_msg
        exit 1
    fi
    if [ "x$file_path" = 'x' ]; then
        echo $err_msg
        exit 1
    fi
    tun_name=$(ssh st "/bin/zsh -c 'alias $tun_alias'" \
                   | grep -Eo "'.[^']+'" \
                   | sed -re "s/'//g" \
                   | awk '{print $NF}')
    echo "'sft scp $tun_name:$file_path .'"
    ssh st "scp -o 'ProxyCommand sft proxycommand $tun_name' $tun_name:$file_path ."
    scp st:$file_path .
    ssh st "rm $file_path"
}

function un_b64 {
    for f in $(find . -name '*.base64' -o -name '*.b64'); do
        decoded_name=$(echo $f | sed -re 's/.b(ase)?64//g')
        echo "Decoding $f => $decoded_name"
        cat $f | base64 -d > $decoded_name
        echo "Done."
    done
}

function cdm_log {
  sed -re 's/^[^{]+:\{/{/g' \
    | jq 'cdm_log'
}

[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return

GREP_COLORS='mt=1;32'
unset GREP_COLOR

if [ "x$TERM" = "xtmux-256color" ]; then
   export TERM=xterm-256color
fi


NPM_PACKAGES="$HOME/.npm-packages"
PATH="$NPM_PACKAGES/bin:$PATH"
# MANPATH="$NPM_PACKAGES/share/man:$(manpath)"
NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"

##### Rubrik sd-dev-env specific
function rklog {
  ~/code/sdmain1/tools/logging/rklog.py
}

function rkless {
  cat $@  | rklog | less -N
}

function rktail {
  stdbuf -o0 -e0 tail $@ | rklog
}

function rktail {
  stdbuf -o0 -e0 tail $@ | ~/code/sdmain1/tools/logging/rklog.py
}

OBS_K8S_SOCKS_PROXY=socks5://localhost:5000

function kctx {
  kubectx
  export kube_ctx=$(kubectx -c)
}

function kctl {
  if [ -z $kube_ctx ]; then
    export kube_ctx=$(kubectx -c)
  fi
  HTTPS_PROXY=$OBS_K8S_SOCKS_PROXY kubectl --context $kube_ctx "$@"
}

alias img='timg -p k -g 80'
#####

PATH=$PATH:~/.dev_utils
