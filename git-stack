#!/usr/bin/env bash

curr_branch=$(git symbolic-ref --short HEAD)

branch=${1:-$curr_branch}

git branch -vv | jq --arg br $branch -Rs \
  'def upstream(curr):
     (. as $m
      | $m[curr]
      | if . then . as $e | $e | [.upstream] + ($m | upstream($e.upstream))
        else [] end);
   def downstream(curr):
     def _downstream(curr):
       (. as $m
        | $m[curr]
        | if . then . else [] end
        | map(
            if . then . as $e | {key: $e, value : ($m | _downstream($e))}
            else
              []
            end));
     (.
      | [.[]]
      | group_by(.upstream)
      | map({key: .[0].upstream, value: . | map(.branch)})
      | from_entries as $m
      | $m
      | _downstream(curr));
   def flatten_singles:
     (.
      | if (type == "array") then . | map(flatten_singles) else . end
      | if (type == "array") and (length == 1) then .[0] else . end
      | if (type == "object") then
          [{key: .key, value: .value | map(flatten_singles)}] | from_entries
        else . end
      | if (type == "object") and
           (length == 1) and
           ([.[]] | flatten | length == 0) then keys[0] else . end
      | if (type == "object") then
          with_entries({
            key: .key,
            value: (if (.value | length == 1) then .value[0] else .value end)})
        else . end);
   (. | split("\n")
      | map({raw: . | gsub(" +"; " ") | split(" ")})
      | map({
        current: (if $br then ($br == .raw[1]) else (. | .raw[0] == "*") end),
        branch: .raw[1],
        upstream: (.raw[3][1:][:-1])})
      | map({key: .branch, value: .} | select(.key))
      | from_entries as $brs
      | $brs[]
      | select(.current) as $curr
      | $curr
      | { "UP": $brs | upstream($curr.branch),
          "DOWN": ($brs | downstream($curr.branch) | map(flatten_singles))})'
