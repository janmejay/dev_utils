#!/usr/bin/env python

import os
import json
import re
import subprocess
import sys
import glob

def rd_file(path):
    with open(path, 'r') as f:
        return f.read()

def get_color(all_good):
    return "#00FF00" if all_good else "#FF0000"

CPU_THERM = "x86_pkg_temp\n"
CPU_MHZ_RE = re.compile(r'^cpu MHz\t{2}: (\d+\.\d+)+$')

class CpuStats:
    SC_CLK_TCK = os.sysconf_names['SC_CLK_TCK']
    user_hz = os.sysconf(SC_CLK_TCK)

    def __init__(self):
        self.user_old = 0
        self.unice_old = 0
        self.system_old = 0
        self.idle_old = 0
        self.iowait_old = 0
        self.irq_old = 0
        self.softirq_old = 0
        self.steal_old = 0
        self.guest_old = 0
        self.guestnice_old = 0
        self.pattern = re.compile("^cpu +(?P<user>[0-9]+) "
                                  "(?P<unice>[0-9]+) "
                                  "(?P<system>[0-9]+) "
                                  "(?P<idle>[0-9]+) "
                                  "(?P<iowait>[0-9]+) "
                                  "(?P<irq>[0-9]+) "
                                  "(?P<softirq>[0-9]+) "
                                  "(?P<steal>[0-9]+) "
                                  "(?P<guest>[0-9]+) "
                                  "(?P<guestnice>[0-9]+)\n$")

    def get_temp(self):
        tz_dirs = glob.glob("/sys/class/thermal/thermal_zone*")
        pkg_dir = [d for d in tz_dirs if rd_file(d + "/type") == CPU_THERM][0]
        return (int(rd_file(pkg_dir + "/temp")) / 1000)

    def avg_freq(self):
        cpu_data = rd_file("/proc/cpuinfo")
        matches = [CPU_MHZ_RE.match(l) for l in cpu_data.split('\n')]
        freqs = [float(m.group(1)) for m in matches if m]
        return "%.2f" % (sum(freqs) / len(freqs))

    def read(self):
        with open("/proc/stat", 'r') as f:
            util_text = f.readline()
        match = self.pattern.search(util_text)

        total_new = 0
        user_new = int(match.group("user"))
        total_new += user_new
        unice_new = int(match.group("unice"))
        total_new += unice_new
        system_new = int(match.group("system"))
        total_new += system_new
        idle_new = int(match.group("idle"))
        total_new += idle_new
        iowait_new = int(match.group("iowait"))
        total_new += iowait_new
        irq_new = int(match.group("irq"))
        total_new += irq_new
        softirq_new = int(match.group("softirq"))
        total_new += softirq_new
        steal_new = int(match.group("steal"))
        total_new += steal_new
        guest_new = int(match.group("guest"))
        total_new += guest_new
        guestnice_new = int(match.group("guestnice"))
        total_new += guestnice_new

        total_old = \
                    self.user_old + \
                    self.unice_old + \
                    self.system_old + \
                    self.idle_old + \
                    self.iowait_old + \
                    self.irq_old + \
                    self.softirq_old + \
                    self.steal_old + \
                    self.guest_old + \
                    self.guestnice_old

        base = total_new - total_old

        used_pct = \
                   (((user_new + unice_new + system_new + \
                      guest_new + guestnice_new) \
                     - \
                     (self.user_old + self.unice_old + self.system_old + \
                      self.guest_old + self.guestnice_old))
                    * 100) / base
        steal_pct = ((steal_new - self.steal_old) * 100) / base
        interrupt_pct = \
                        (((irq_new + softirq_new) \
                          - \
                          (self.irq_old + self.softirq_old))
                         * 100) / base
        iowait_pct = ((iowait_new - self.iowait_old) * 100) / base

        self.user_old = user_new
        self.unice_old = unice_new
        self.system_old = system_new
        self.idle_old = idle_new
        self.iowait_old = iowait_new
        self.irq_old = irq_new
        self.softirq_old = softirq_new
        self.steal_old = steal_new
        self.guest_old = guest_new
        self.guestnice_old = guestnice_new

        all_good = (iowait_pct < 5) and \
                   (used_pct < 80) and \
                   (steal_pct < 0.1)

        color = get_color(all_good)

        core_tmp = self.get_temp()
        avg_mhz = self.avg_freq()

        msg = ("%.1f Â°C, %s MHz, Use: %.1f%%, Wa: %.1f%%, Int: %.1f%%, St: %.1f%%" %
               (core_tmp, avg_mhz, used_pct, iowait_pct, interrupt_pct, steal_pct))

        return [{"color": color,
                "name": "cpu",
                "markup": "none",
                "full_text": msg,
                "instance": "cpu"}]

class MemMatcher:
    def __init__(self, name):
        self.name = name
        self.re = re.compile("^%s:\\s+([0-9]+) kB$" % name)

class MemStats:
    def __init__(self):
        self.matchers = [
            MemMatcher("MemTotal"),
            MemMatcher("MemFree"),
            MemMatcher("Buffers"),
            MemMatcher("Cached"),
            MemMatcher("Unevictable"),
            MemMatcher("SwapTotal"),
            MemMatcher("SwapFree"),
            MemMatcher("Dirty")]

    def read(self):
        values = {}
        matcher_idx = 0
        with open("/proc/meminfo", 'r') as f:
            for line in f:
                for i in range(matcher_idx, len(self.matchers)):
                    entry = self.matchers[i]
                    match = entry.re.search(line)
                    if match != None:
                        values[entry.name] = int(match.group(1))
                        matcher_idx = i
                        break
        free = values["MemFree"]
        total = values["MemTotal"]
        buffers = values["Buffers"]
        cached = values["Cached"]
        pinned = values["Unevictable"]
        swap_total = values["SwapTotal"]
        swap_free = values["SwapFree"]
        dirty = values["Dirty"]

        free_pct = (free*100)/total
        buff_cache = (buffers + cached)
        cache_pct = (buff_cache*100)/total
        if swap_total == 0:
            swap_free_pct = 0
        else:
            swap_free_pct = (swap_free*100)/swap_total

        all_good = (free_pct < 2) or \
                   ((cache_pct + free_pct) < 10) or \
                   (pinned > 10) or \
                   (dirty > 10)

        color = get_color(all_good)

        msg_format = "Rfr: %d (%0.1f%%), " + \
                     "Csh: %d (%0.1f%%), " + \
                     "Sfr: %d (%0.1f%%), " + \
                     "Drt: %0.2f, " + \
                     "Pin: %0.2f"
        msg =  msg_format % (free / 1024, free_pct, buff_cache / 1024, cache_pct, swap_free / 1024, swap_free_pct, dirty / 1024, pinned / 1024)

        return [{"color": color,
                "name": "mem",
                "markup": "none",
                "full_text": msg,
                "instance": "mem"}]

class ConnectivityCheck:
    def __init__(self, addrs):
        self.__addrs = addrs.items()

    def read(self):
        results = [{
            "color": "#FFFFFF",
            "name": "dummy_nw",
            "markup": "none",
            "full_text": "ðŸ–§",
            "instance": "dummy_nw",
            "separator": False,
            "separator_block_width": 16
        }]
        for name, addr in self.__addrs:
            ret = subprocess.run(
                args = ["timeout", "2", "ping", "-nc", "1", addr],
                stdout = subprocess.DEVNULL,
                stderr = subprocess.DEVNULL)
            results.append({
                "color": get_color(ret.returncode == 0),
                "name": name,
                "markup": "none",
                "full_text": name,
                "instance": name,
                "separator": False,
                "separator_block_width": 9
            })

        last_result = results[-1]
        del last_result["separator_block_width"]
        del last_result["separator"]

        return results


own_path=os.path.realpath(__file__)

i3status_cfg_path=("%s/rc/i3status.conf" % os.path.dirname(own_path))

i3status_cmd=("i3status -c %s" % i3status_cfg_path)

stdout = os.fdopen(sys.stdout.fileno(), 'wb', 0)

p = subprocess.Popen(
    i3status_cmd,
    shell=True,
    bufsize=-1,
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
    stderr=subprocess.STDOUT,
    close_fds=True)

p.stdin.close()

raw_bytes = p.stdout.readline()
line = raw_bytes.decode('utf-8')
data = json.loads(line)
assert data["version"] == 1

stdout.write(raw_bytes)


raw_bytes = p.stdout.readline()
line = raw_bytes.decode('utf-8')
assert str.strip(line) == '['

stdout.write(raw_bytes)

cpu_stats_reader = CpuStats()
mem_stats_reader = MemStats()
connectivity_check_reader = \
    ConnectivityCheck({
        "Gogl": "8.8.8.8",
        "Jail": "172.19.0.2",
        "Vpn": "phabricator.rubrik.com",
        "HomR": "192.168.0.1"})

while True:
    raw_bytes = p.stdout.readline()
    if not raw_bytes:
        print("Aborting, i3status died???")
        p.terminate()
        p.wait()
        exit(1)
    line = raw_bytes.decode('utf-8')

    if line[0] == ",":
        data_str = line[1:]
        prepend_comma = True
    else:
        data_str = line
        prepend_comma = False

    cpu_stats = cpu_stats_reader.read()
    mem_stats = mem_stats_reader.read()
    connectivity_data = connectivity_check_reader.read()

    data = cpu_stats + mem_stats + connectivity_data + json.loads(data_str)
    data_str = json.dumps(data)

    if prepend_comma:
        msg = (",%s\n" % data_str)
    else:
        msg = ("%s\n" % data_str)

    stdout.write(msg.encode('utf-8'))
